JAVA 

C面向过程
强调是过程动作

C语言
—————————
面向对象

成员变量，成员函数—>类中的变量和函数

引用型变量: 类的实例
——————————
局部变量存活在栈中
成员变量存活在堆中！！！！！！！

生命周期不同
成员变量会被初始化
局部变量不会被初始化！！！！！！重点
———————————
匿名对象 new car().run()
匿名对象可以做实际参数传递
———————————
基本数据类型传参数要注意！！ 只在栈中进行，函数结束后基本类型参数就弹栈了， 数据不一定被改变

引用数据传参， 数据被改变就改变了
————————————
封装 Encapsulation
不能直接访问成员变量， 而是提供访问成员变量的方法，避免瞎用 set(), get()
私有仅仅是封装的一种体现
Java里最小的封装就是函数
框架本身也是封装体
————————————
构造函数（写不写都行，有默认构造函数（空参数））

对象初始化
重载: 
构造函数进栈！！然后赋值到堆里成员变量
方法进栈，变量进堆

Class Person{
Void Person () 这是个普通函数虽然与类名相同，但是不是构造函数

Person()是构造函数
}

构造函数中可以有return 语句
——————————————
this 关键字
this.name=name 把栈中局部变量传递给堆中对象的成员变量
构造函数互相调用
Person(String name)
{	this.name = name;
}
Person (String name, int age)
{	this(name); 调用构造函数Person(String name). // 此处不可调用this.Person() 因为此this并未有初始化，构造函数初始化对象后才有对象。
	this.age=age;
}
———————————————
Static 关键字（修饰符）
为了省堆内存，如果一个成员变量所有对象共享
存在于对象之前，可以被类名调用，随着类的加载就已经存在了class.staticVariable
成员变量/实例变量 string name 
静态变量/类变量 static string name 随着类消失才消失，虚拟机结束类才消失。类也是一种对象，有自己的回收机制
Static类变量存储在方法区(的静态区) 所以也叫对象的共享数据

静态方法不可以存在给静态变量，因为静态方法在对象存在前就已经存在 而成员变量在对象new出来时候才能存在

静态方法不可以使用this和super关键字

主函数一定是静态的

主函数格式固定，被jvm所识别和调用
Public 权限必须最大
Static 虚拟机不需要对象
Void 主函数没有具体的返回值
Main 函数名不是关键字jvm识别
String[] args:主函数参数列表 字符串数组类型的参数
JVM虚拟机调用传入参数: 地址值  运行时传入 java MainDemo haha hehe xixi.  args.length 3 args[0]

方法区是存放类和方法 栈是运行时进入/释放

静态函数: 函数是否有访问到对象中的特有数据，函数不需要定义为静态
如果不需要访问对象，就不要创造对象使用静态函数，不要浪费内存

静态代码块: 
class StaticCode
{
	static{}
}
随着类的加载而执行，静态代码块只执行一次

类不需要创建对象但需要初始化使用静态代码块，比如类全部是静态成员

构造代码块
调用几次对象执行几次，给所有对象初始化       通用性
构造函数给不同的对象special初始化	          私有性
——————————————

一般工具类都是静态的，因为不会访问到对象成员数据
类中都是静态的， 为了保证不让其他程序创造对象， 对构造函数进行初始化priviate 构造函数！！！！

———————————————
Javadoc 
提取文档注释
文档只提供公有的和被保护的
———————————————
对象设计模式 23种设计模式
单例模式: 一个类只有一个对象，共享信息，静态变量生命周期过长,使用单例模式
如何保证对象唯一性
1.不允许其他程序new对象
2.类中创建本类实例
3.对外提供一个方法让其他程序获取该对象

class  Single
	private static Single s=new Single();
	private Single(){}
	public static Single getInstance()
		return s

懒汉模式 类.getInstance()用到时候再去创建单例对象
饿汉模式 类加载既创建
类加载是创不创建对象

懒汉式存在的问题: 被多线程访问时候存在隐患，开发选择饿汉式比较多
—————————————————
对象继承extends
1.提高代码复用性
2.让类与类之间产生关系，给多态提供关系

Java不直接支持多继承，父类中相同成员。会产生调用的不确定性
支持多层继承，了解源头，创建最底下的类的对象
当类与类之间存在着所属关系就定义继承

当子父区分用super区分父类
This代表一个本类对象的引用
Super代表一个父类的空间
父类中的私有成员都是被继承，子类不可直接访问，可间接访问

重载 同一个类中
覆盖 在子类中，一模一样，子类覆盖父类方法是，子类权限要大于父类权限
什么时候使用覆盖操作:
访问子类构造函数时候父类也会运行super（）

为什么子类实例化要访问到父类构造函数: 子类继承了父类，获取到了父类中的内容，所以使用父类内容之前，要看父类如何对自己的内容初始化，必须访问父类中的构造函数。

如果父类中没有定义空参数构造函数，子类的super要明确调用父类中的哪儿个构造函数
注意 super语句必须要定义在子类构造函数的第一行，父类先初始化，然后子类初始化
子类函数如果使用this调用了本类构造函数时， super就没有了，super只被子类构造函数中调用一次

对象实例化过程:
Person p=new Person()
1.JVM会去读取指定的路径下的Person.class文件，并加载进内存。
并会先加载父类（如果有直接父类的情况）
2.在堆内存开辟空间分配内存地址
3.并在对象空间中，对对象中的属性默认初始化
4.调用对应构造函数初始化
5.在构造函数中第一行先调用父类构造函数初始化
6.父类初始化后对子类属性进行显示初始化
7.在进行子类构造函数特定初始化
8.初始化后，将地址付给指针
————————————
Final 修饰符 最终究极无法改变
继承打破了封装性 因为子类覆盖
Final可修饰类变量方法 final修饰的不可继承
Final修饰的方法不可覆盖
Final修饰的变量为常量只能赋值一次
常量一般用大写 PI
private static final 为什么要用final修饰变量，其实在程序中如果一个数据是固定的，那么直接使用这个数据但是阅读性差，所以该数据起个名字，而且这个变量名称的值不能变化，所以加上final固定。
final修饰变量会进入常量池
—————————————
抽象类 

抽象: 
abstract class Demo{
	abstract void show();
}

方法只有声明没有实现时，方法就是抽象方法，需要放在抽象类
抽象类不可以被实例化 不可以new
抽象类子类需要实现所有抽象方法，不然子类还是抽象类

抽象类有构造函数，用于给子类进行初始化
抽象类可以不定义抽象方法，可以，但很少目的是不让该类创造对象，awt适配器

abstract class demo {
	abstract void show1();  —>抽象方法
	void show1(){}		      —>空方法体
}

抽象不可以使用private，因为抽象类以后要被覆盖，私有访问不到
抽象不可以使用static，多余浪费，抽象不需要new，不使用到方法体
抽象不可以使用final， 抽象需要覆盖，final不可覆盖

抽象类和一般类都是描述事物的，都定义了成员
不同点 
1.抽象类信息不足
2.一般类中不能定义抽象方法
3.一般类可以被实例化抽象类不可以

抽象类一定是个父类，需要子类覆盖方法才可以对子类进行实例化
——————————
Interface 接口
当一个抽象类中的方法全部是抽象的时候，可以将此抽象类用接口表示
对于接口中常见的成员，这些成员都有固定的修饰符，不写就java自动加，但阅读性变差
全局常量 public static final
抽象方法public abstract

类于类之间是继承关系，类与接口之间是实现的关系
————————————
多实现

多实现不会出现不确定性，因为实现在本类中并没有方法体
接口与接口之间是继承关系extends而且接口可以多继承 interface QQ extends MM, HH…..
接口的特点

————————————
多态

对象的多态性
猫 x=new 猫（）
动物 x=new 猫（）
父类指向子类对象
一个对象可以具备多种形态

父类或者接口的引用指向其子类对象
省代码，提高代码扩展性，前期定义的代码可以使用后期的内容
Cat cat=new cat()
Dog dog=new dog()
method(cat)
method(dog)

Method(animal k)
K.talk()

弊端和前提:
前期定义不可以使用后期子类出现的特有内容
必须有有关系，继承或者实现
必须要有覆盖

多态转型
Animal a=new cat() 自动类型提升，猫对象提升了动物类型，但是持有的特有功能无法访问。作用是限制对特有功能的访问，向上转型
a.eat()
如果还想用特有功能，将对象进行向下转型
（Cat)a.catchMouse(); 向下转型的目的，使用子类中的特有方法
转型，子类对象在做着类型的变化

Instanceof 用于判断对象的具体类型，只能用于引用数据类型判断
class Fu()
{
Int num=3;
}
Class Zi extends Fu
{
Int num=4;
}

Fu f=new Zi();
f.num=4
多态的成员变量，成员函数，静态函数
编译时候看右边
运行时候看对象

成员变量:（运行时） 创建子类，访问父类的成员变量
编译和运行都看左边父类

（非静态）成员函数: （运行时）子类覆盖父类，访问子类的内容
编译看左边，运行看右边

静态函数: 调用父类型静态方法，编译和运行都看左边

静态方法不涉及多态，对象的多态性

———————————————————
内部类
方便成员调用，不用new对象就可以实现类与类之间成员变量函数的访问
成员变量访问内部类可以new一个对象

内部类可以直接访问外部类的成员
内部类要访问内部类必须建立内部类对象

内部类修饰符:
成员修饰符修饰

Out.inner in=new Outer().new Inner(); 不能私有，私有在其他类中无法访问
静态内部类，相当于外部类 Outer.Inner in=new Outer.Inner();
如果内部类中有静态方法或者成员，内部类必须是静态

Class Outer
{
	int num=3;
	class Inner{
		int num=4;
		void show(){
			int num=5
			sop(num) —>5
			sop(this.num)—>4
			sop(Outer.this.num)—>3
		}
	}
}

为什么内部类能直接访问母类中的成员
内部类持有母类的东西，因为持有母类object this
—————————————————————————
局部内部类

在类方法中可有类

void method(){
	final int x=9;
	class Inner{
		void show()
		sop(x);

	}
}

内部类在局部位置上只能访问常量， final修饰变量会进入常量池，即使方法弹栈，常量池还在，解决了对象存在而局部常量消失的问题
常量池在内存方法区
———————————————————————————
匿名内部类

必须有前提:
内部类必须继承或者实现一个外部类或者接口
Abstract class Demo
{
	abstract void show();
}
new Demo(){
	void show()
	{}	
}

匿名子类对象，new 父类或者接口，然后override内部方法










